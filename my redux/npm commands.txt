npm install bootstrap
npm install react-router-dom
npm install redux
npm install react-redux


Redux is made to maintain the entire project data in one place.

The state of our whole application is stored in an object tree within a single store. Maintain your whole application state in a single object which would be managed by the Redux store.


// userreducer will maintain the data of user component
// productreducer will maintain the data of product component
// apireducer will maintain the data of api component
// main reducer will hold all 3 components - parent file, above child file
// React and Redux are separate libraries, and to communicate we use react-redux
// React <= react-redux => Redux
// input / output, react will handle whereas storage will be managed by their respective reducers.


------- code for each reducers -------

const ApiList/BookList/UserList = (state=[], action)=>{ 
  var dataArray = Object.assign([], state);
  
  if(action.type==="saveapi/addbook/adduser"){
    dataArray = action.alldata; // assigning the complete array data
    dataArray.push(action.bookinfo); 
    dataArray.push(action.name);
  }
  if(action.type==="deleteuser"){
    dataArray.splice(action.bookindex, 1);
  }
  return dataArray;
}

------------------------------------------------


-------> code for main reducer <-------

import {combineReducers} from "redux";
import BookList from "./bookreducer";  
// ...import all the reducers

const MainReducer = combineReducers ({
  BookList, UserList, ApiList
});

export default MainReducer;

------------------------------------------------


-------> code for react component <-------

import {useDispatch, useSelector} fron 'react-redux';

const Myuser = () =>{
  let dispatch = useDispatch();
  let userlist = useSelector(state => state.UserList); // to fetch data from redux
  
  const save = () =>{
    var dispatchData = {type:"adduser", name:fullname};
    dispatch(dispatchData); // to send data to redux
  }
  
  const deleteUser = (index) =>{
    var dispatchData = {type:"deleteuser", userindex:index};
    dispatch(dispatchData);
  }
  
} 

------------------------------------------------


-------> code for react store <-------

import { legacy_createStore as createStore} from 'redux';
import MainReducer from './mainreducer'

const MyStore = createStore(MainReducer);

export default MyStore;

------------------------------------------------


-------> code for index.js <-------

//import provider and MyStore

<Provider store={MyStore}>
  <App />
</Provider>

------------------------------------------------

1. Component
2. reducers for handling different types of data (array, objects etc)
3. useDispatch - "react-redux" (send react to redux)
4. Through action dispatch to reducer
5. useSelector - "react-redux" (receive redux to react)


store is like a shop.
reducers are like shopkeepers.
action is like a customer.

React-Redux is the official UI Binding Library for React. It provides binding to use React and Redux together in an application. It helps us to communicate react to redux store to dispatch and bring back data.

An action is dispatched with an intention to cause change. This change is performed by the reducer. Reducer is the only way to change states in Redux, making it more predictable, centralised and debuggable.

Actions only tell what to do, but they donâ€™t tell how to do, so reducers are the pure functions that take the current state and action and return the new state and tell the store how to do.

To update the state of your app , you need to let Redux know about that with an action. Not allowed to directly update the state object.

In a typical Redux app there is just a single store with a single Root Reducing function.
-As Your app grows, you split the Root Reducer in to smaller reducers independently operating on the different parts of the state tree.
-this is exactly like how there is just one root component in a react app, but is composed out of many small components.
